<ui:Page x:Class="Antflip.Pages.StackedBand"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:ui="http://schemas.modernwpf.com/2019"
      xmlns:Behaviors="http://schemas.microsoft.com/xaml/behaviors"
      xmlns:local="clr-namespace:Antflip.Pages"
      mc:Ignorable="d"
      d:DesignHeight="450" d:DesignWidth="800"
      Title="StackedBand">
    <ui:Page.Resources>
        <Style TargetType="RadioButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
        </Style>
        <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
        </Style>
    </ui:Page.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="1*"/>
        </Grid.RowDefinitions>
        <RadioButton GroupName="Stack" Content="Upper" IsChecked="{Binding UpperStack.Default, Mode=OneTime}">
          <Behaviors:Interaction.Triggers>
            <Behaviors:EventTrigger EventName="Checked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding UpperStack}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Loaded">
              <Behaviors:Interaction.Behaviors>
                <Behaviors:ConditionBehavior>
                  <Behaviors:ConditionalExpression>
                    <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RadioButton}}}" Operator="Equal" RightOperand="True" />
                  </Behaviors:ConditionalExpression>
                </Behaviors:ConditionBehavior>
              </Behaviors:Interaction.Behaviors>
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding UpperStack}" />
            </Behaviors:EventTrigger>
          </Behaviors:Interaction.Triggers>
        </RadioButton>
        <RadioButton GroupName="Stack" Grid.Row="1" Content="Both" IsChecked="{Binding BothStack.Default, Mode=OneTime}">
        <Behaviors:Interaction.Triggers>
            <Behaviors:EventTrigger EventName="Checked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding BothStack}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Loaded">
              <Behaviors:Interaction.Behaviors>
                <Behaviors:ConditionBehavior>
                  <Behaviors:ConditionalExpression>
                    <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RadioButton}}}" Operator="Equal" RightOperand="True" />
                  </Behaviors:ConditionalExpression>
                </Behaviors:ConditionBehavior>
              </Behaviors:Interaction.Behaviors>
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding BothStack}" />
            </Behaviors:EventTrigger>
          </Behaviors:Interaction.Triggers>
        </RadioButton>
        <RadioButton GroupName="Stack" Grid.Row="2" Content="Lower" IsChecked="{Binding LowerStack.Default, Mode=OneTime}">
        <Behaviors:Interaction.Triggers>
            <Behaviors:EventTrigger EventName="Checked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding LowerStack}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Loaded">
              <Behaviors:Interaction.Behaviors>
                <Behaviors:ConditionBehavior>
                  <Behaviors:ConditionalExpression>
                    <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RadioButton}}}" Operator="Equal" RightOperand="True" />
                  </Behaviors:ConditionalExpression>
                </Behaviors:ConditionBehavior>
              </Behaviors:Interaction.Behaviors>
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding LowerStack}" />
            </Behaviors:EventTrigger>
          </Behaviors:Interaction.Triggers>
        </RadioButton>
        <RadioButton GroupName="Ant" Grid.Column="2" Content="ANT1" IsChecked="{Binding Antenna1.Default, Mode=OneTime}">
        <Behaviors:Interaction.Triggers>
            <Behaviors:EventTrigger EventName="Checked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding Antenna1}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Loaded">
              <Behaviors:Interaction.Behaviors>
                <Behaviors:ConditionBehavior>
                  <Behaviors:ConditionalExpression>
                    <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RadioButton}}}" Operator="Equal" RightOperand="True" />
                  </Behaviors:ConditionalExpression>
                </Behaviors:ConditionBehavior>
              </Behaviors:Interaction.Behaviors>
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding Antenna1}" />
            </Behaviors:EventTrigger>
          </Behaviors:Interaction.Triggers>
        </RadioButton>
        <RadioButton GroupName="Ant" Grid.Row="1" Grid.Column="2" Content="ANT2" IsChecked="{Binding Antenna2.Default, Mode=OneTime}">
        <Behaviors:Interaction.Triggers>
            <Behaviors:EventTrigger EventName="Checked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding Antenna2}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Loaded">
              <Behaviors:Interaction.Behaviors>
                <Behaviors:ConditionBehavior>
                  <Behaviors:ConditionalExpression>
                    <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type RadioButton}}}" Operator="Equal" RightOperand="True" />
                  </Behaviors:ConditionalExpression>
                </Behaviors:ConditionBehavior>
              </Behaviors:Interaction.Behaviors>
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding Antenna2}" />
            </Behaviors:EventTrigger>
          </Behaviors:Interaction.Triggers>
        </RadioButton>
        <ToggleButton Grid.Row="2" Grid.Column="2" Content="Swap AMP" IsChecked="{Binding EnableAmpSwap.Default, Mode=OneTime}">
            <Behaviors:Interaction.Triggers>
            <Behaviors:EventTrigger EventName="Checked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding EnableAmpSwap}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Unchecked">
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding DisableAmpSwap}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Loaded">
              <Behaviors:Interaction.Behaviors>
                <Behaviors:ConditionBehavior>
                  <Behaviors:ConditionalExpression>
                    <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" Operator="Equal" RightOperand="True" />
                  </Behaviors:ConditionalExpression>
                </Behaviors:ConditionBehavior>
              </Behaviors:Interaction.Behaviors>
              <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding EnableAmpSwap}" />
            </Behaviors:EventTrigger>
            <Behaviors:EventTrigger EventName="Unloaded">
                <Behaviors:Interaction.Behaviors>
                  <Behaviors:ConditionBehavior>
                    <Behaviors:ConditionalExpression>
                      <Behaviors:ComparisonCondition LeftOperand="{Binding Path=IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}}" Operator="Equal" RightOperand="True" />
                    </Behaviors:ConditionalExpression>
                  </Behaviors:ConditionBehavior>
                </Behaviors:Interaction.Behaviors>
                <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding DisableAmpSwap}" />
              </Behaviors:EventTrigger>
          </Behaviors:Interaction.Triggers>
        </ToggleButton>
        <Behaviors:Interaction.Triggers>
          <Behaviors:EventTrigger EventName="Loaded">
            <Behaviors:InvokeCommandAction Command="{Binding ActuateCommand}" CommandParameter="{Binding Load}" />
          </Behaviors:EventTrigger>
        </Behaviors:Interaction.Triggers>
    </Grid>
</ui:Page>
